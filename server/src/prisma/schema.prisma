datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with enhanced data types and relationships
model User {
  id               String    @id @default(uuid())
  armyNo           String
  unit             String?
  rank             String?
  dateOfCommission DateTime?
  firstName        String
  middleName       String?
  lastName         String
  email            String?   @unique
  mobileNo         String?   @unique
  dob              DateTime?
  refreshToken     String

  role    Role     @default(PATIENT)
  Patient Patient?
  Doctor  Doctor?
}

model Admin {
  id           String  @id @default(uuid())
  adminId      String
  password     String
  refreshToken String?
}

// Role model for user access control
enum Role {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
}

// Patient model with improved relationships and data types
model Patient {
  id         String      @id @default(uuid())
  userId     String?     @unique
  user       User?       @relation(fields: [userId], references: [id])
  medical    Medical[]
  test       Test[]
  treatments Treatment[]
}

// Medical record model with relationships and enhanced data types
model Medical {
  id            String    @id @default(uuid())
  heightCm      Int?
  weightKg      Float?
  BMI           Float?
  chest         Int?
  waist         Int?
  bloodPressure String?
  disabilities  String?
  bloodGroup    String?
  onDrug        Boolean
  date          DateTime?

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @unique
 familyhistories familyhistory
}

// Doctor model with relationships
model Doctor {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  specialization String
  Treatment      Treatment[]
  Department     Department? @relation(fields: [departmentId], references: [id])
  departmentId   String?
  status         String      @default("PENDING")
  requests       Request[]
}
//Doctor Request
model Request {
  id         String    @id @default(uuid())
  doctorId String @unique
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
}
// Department model
model Department {
  id       String  @id @default(uuid())
  name     String
  location String?

  // One-to-many relationship with Doctors
  doctors  Doctor[]
  doctorId String
}

// Treatment model with relationships
model Treatment {
  id          String @id @default(uuid())
  description String
  doctor      Doctor @relation(fields: [doctorId], references: [id])
  doctorId    String

  medications Medication[]
  test        Test[]
  Patient     Patient?     @relation(fields: [patientId], references: [id])
  patientId   String?
}

model Medication {
  id          String     @id @default(uuid())
  name        String
  description String
  Treatment   Treatment? @relation(fields: [treatmentId], references: [id])
  treatmentId String?
}

// Test model with relationships
model Test {
  id       String   @id @default(uuid())
  date     DateTime
  testFor  String
  imageUrl String
  result   String

  // Many-to-many relationships with Medical records and Treatments (through ame & pme models)
  Patient     Patient?   @relation(fields: [patientId], references: [id])
  patientId   String?
  Treatment   Treatment? @relation(fields: [treatmentId], references: [id])
  treatmentId String?
}
model familyhistory{
  id       String   @id @default(uuid())
  Hypertension String
  Diabetes_Mellitus String
  Any_Unnatural_Death String
  Any_other_significant_history String
  Medical   Medical  @relation(fields: [id], references: [id])
}
