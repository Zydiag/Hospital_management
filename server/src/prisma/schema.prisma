datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with enhanced data types and relationships
model User {
  id               String    @id @default(uuid())
  armyNo           String
  unit             String?
  rank             String?
  dateOfCommission DateTime?
  firstName        String
  middleName       String?
  lastName         String?
  email            String?   @unique
  mobileNo         String?   @unique
  dob              DateTime
  role             Role      @default(PATIENT)
  patient          Patient?
  doctor           Doctor?
  refreshToken     String
  createdAt        DateTime
  updatedAt        DateTime  @updatedAt
}

model Admin {
  id           String  @id @default(uuid())
  adminId      String
  password     String
  refreshToken String?
}

// Role model for user access control
enum Role {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
}

// Patient model with improved relationships and data types
model Patient {
  id            String         @id @default(uuid())
  userId        String?        @unique
  user          User?          @relation(fields: [userId], references: [id])
  medical       Medical[]
  treatments    Treatment[]
  familyHistory FamilyHistory?
}

// Medical record model with relationships and enhanced data types
model Medical {
  id            String   @id @default(uuid())
  heightCm      Int?
  weightKg      Float?
  BMI           Float?
  chest         Int?
  waist         Int?
  bloodPressure String?
  disabilities  String?
  allergies     String?
  bloodGroup    String?
  AME           AME[]
  PME           PME[]
  patient       Patient  @relation(fields: [patientId], references: [id])
  patientId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AME {
  id        String   @id @default(uuid())
  medical   Medical  @relation(fields: [medicalId], references: [id])
  medicalId String
  createdAt DateTime @default(now())
}

model PME {
  id        String   @id @default(uuid())
  medical   Medical  @relation(fields: [medicalId], references: [id])
  medicalId String
  createdAt DateTime @default(now())
}

//Doctor model with relationships
model Doctor {
  id             String      @id @default(uuid())
  userId         String      @unique
  specialization String
  status         Status      @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  treatment      Treatment[]
  user           User        @relation(fields: [userId], references: [id])
  request        Request?
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Request {
  id        String   @id @default(uuid())
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String   @unique
}

// Treatment model with relationships
model Treatment {
  id             String   @id @default(uuid())
  diagnosis      String
  test           Test[]
  note           String
  medicationName String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  doctorId       String
  patient        Patient? @relation(fields: [patientId], references: [id])
  patientId      String?
}

// Test model with relationships
model Test {
  id          String     @id @default(uuid())
  date        DateTime
  testFor     String
  imageUrl    String
  result      String
  treatment   Treatment? @relation(fields: [treatmentId], references: [id])
  treatmentId String?
}

model FamilyHistory {
  id                      String   @id @default(uuid())
  hypertension            String
  diabetesMellitus        String
  anyUnnaturalDeath       String
  otherSignificantHistory String
  Medical                 Patient  @relation(fields: [patientId], references: [id])
  patientId               String   @unique
  createdAt               DateTime @default(now())
}
