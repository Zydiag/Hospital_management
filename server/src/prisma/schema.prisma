datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with enhanced data types and relationships
model User {
  id               String    @id @default(uuid())
  armyNo           String    @unique
  unit             String?
  rank             String?
  dateOfCommission DateTime?
  firstName        String
  middleName       String?
  lastName         String?
  email            String?   @unique
  mobileNo         String?   @unique
  dob              DateTime
  role             Role      @default(PATIENT)
  patient          Patient?
  admin            Admin?
  doctor           Doctor?
  refreshToken     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  password         String?   @unique
}

model Admin {
  id           String  @id @default(uuid())
  adminId      String
  password     String
  refreshToken String?
  userId       String? @unique
  user         User?   @relation(fields: [userId], references: [id])
}

// Role model for user access control
enum Role {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
}

// Patient model with improved relationships and data types
model Patient {
  id            String         @id @default(uuid())
  userId        String?        @unique
  user          User?          @relation(fields: [userId], references: [id])
  medical       Medical[]
  treatments    treatment[]
  AMEs          AME[]
  AME2s         AME2[]
  PMEs          PME[]
  familyHistory familyHistory?
}

// Medical record model with relationships and enhanced data types
model Medical {
  id            String   @id @default(uuid())
  heightCm      Int?
  weightKg      Float?
  BMI           Float?
  chest         Int?
  waist         Int?
  bloodPressure String?
  disabilities  String?
  allergies     String?
  bloodGroup    String?
  patientId     String
  patient       Patient  @relation(fields: [patientId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  doctorId      String
}

model AME {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  createdAt   DateTime @default(now())
  date        DateTime
  description String
}

model AME2 {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  createdAt   DateTime @default(now())
  date        DateTime
  description String
}

model PME {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  createdAt   DateTime @default(now())
  date        DateTime
  description String
}

//Doctor model with relationships
model Doctor {
  id              String         @id @default(uuid())
  userId          String         @unique
  specialization  String
  status          Status         @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  request         Request?
  AMEs            AME[]
  AME2s           AME2[]
  PMEs            PME[]
  Mediacls        Medical[]
  Treatments      treatment[]
  familyhistories familyHistory?
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Request {
  id        String   @id @default(uuid())
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String   @unique
}

// Treatment model with relationships
model treatment {
  id          String   @id @default(uuid())
  diagnosis   String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient? @relation(fields: [patientId], references: [id])
  patientId   String?
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  doctorId    String
}

// Test model with relationships
model familyHistory {
  id                      String   @id @default(uuid())
  hypertension            String
  diabetesMellitus        String
  anyUnnaturalDeath       String
  otherSignificantHistory String
  patient                 Patient  @relation(fields: [patientId], references: [id])
  patientId               String   @unique
  doctor                  Doctor   @relation(fields: [doctorId], references: [id])
  doctorId                String   @unique
  createdAt               DateTime @default(now())
}
